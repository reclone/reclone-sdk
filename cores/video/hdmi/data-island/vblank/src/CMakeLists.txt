
add_custom_command (
  OUTPUT  VVBlankDataIsland.cpp
          VVBlankDataIsland.h
          VVBlankDataIsland__Syms.cpp
          VVBlankDataIsland__Syms.h
          VVBlankDataIsland__Trace.cpp
          VVBlankDataIsland__Trace__Slow.cpp
  DEPENDS VBlankDataIsland.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/avi-infoframe/src/AviInfoFramePacket.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/audio-infoframe/src/AudioInfoFramePacket.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/serializer/src/DataIslandPacketSerializer.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccStep.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccSingleBitEncoder.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccDualBitEncoder.v
    ${PROJECT_SOURCE_DIR}/video/tmds/terc4-encoder-4to10/src/Terc4Encoder4to10.v
    ${PROJECT_SOURCE_DIR}/video/tmds/ctl-encoder-2to10/src/CtlEncoder2to10.v
  COMMAND perl ${VERILATOR} ${VERILATOR_OPTS} -Mdir ${CMAKE_CURRENT_BINARY_DIR} -cc
    ${CMAKE_CURRENT_SOURCE_DIR}/VBlankDataIsland.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/avi-infoframe/src/AviInfoFramePacket.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/audio-infoframe/src/AudioInfoFramePacket.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/packet/serializer/src/DataIslandPacketSerializer.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccStep.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccSingleBitEncoder.v
    ${PROJECT_SOURCE_DIR}/video/hdmi/data-island/ecc/src/BchEccDualBitEncoder.v
    ${PROJECT_SOURCE_DIR}/video/tmds/terc4-encoder-4to10/src/Terc4Encoder4to10.v
    ${PROJECT_SOURCE_DIR}/video/tmds/ctl-encoder-2to10/src/CtlEncoder2to10.v
)

# Verilog .v files are added here so that they get added to any IDE project generated by CMake.
add_library (VVBlankDataIsland STATIC
    VVBlankDataIsland.cpp
    VVBlankDataIsland__Syms.cpp
    VVBlankDataIsland__Trace.cpp
    VVBlankDataIsland__Trace__Slow.cpp
    VBlankDataIsland.v
)

target_compile_options(VVBlankDataIsland PRIVATE ${VK_CPPFLAGS})

target_include_directories(VVBlankDataIsland PUBLIC ${CMAKE_CURRENT_BINARY_DIR})

target_link_libraries(VVBlankDataIsland verilated)
